<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<style>
			body {
				margin: 0px;
				background-color: #fff;
				overflow: hidden;
        color: #0f0;
			}

      #holder {
        position: absolute;
        top: 50%;
        border: 5px dashed #ccc;
        width: 1000px;
        height: 500px;
        margin: auto;
        left: 50%;
        margin-left: -500px;
        margin-top: -250px;
      }
      #holder.hover {
        border: 5px dashed #333;
        background-color: rgba(255,255,255,.2);
      }

      #model_palette {
        position: absolute;
        width: 300px;
        height: 100%;
        right: 0px;
        z-index: 1;
      }

		</style>
	</head>
	<body>

		<script src="/three.js"></script>
		<script src="/stats.min.js"></script>
    <script src="/loaders/STLLoader.js"></script>
    <script src="/loaders/OBJLoader.js"></script>
    <script src="/loaders/BufferGeometryLoader.js"></script>
    <script src="/wip/BufferGeometryUtils.js"></script>
    <script src="/exporters/BufferGeometryExporter.js"></script>
    <script src="/exporters/TypedGeometryExporter.js"></script>

    <script src="/FileHandler.js"></script>
    <script src="/Brush.js"></script>

    <script>

      var container, stats;
      var scene;
      var cameraMain, rendererMain;
      var cameraAux, rendererAux;
      var projector, plane;
      var cursor3d;

      var raycaster, theta = 270,
      isShiftDown = false, isCtrlDown = false,
      target = new THREE.Vector3( 0, 0, 0 );
      var normalMatrix = new THREE.Matrix3();

      var cubeGeometry = new THREE.CubeGeometry( 50, 50, 50 );
      var cubeMaterial = new THREE.MeshLambertMaterial( { color: 0x00ff80, overdraw: 0.5 } );
      var cursorMaterial = new THREE.MeshLambertMaterial( { color: 0x555555 } );

      var objects = [];

      var palette = new ToolPalette();
      var cube = new THREE.Mesh( cubeGeometry, cursorMaterial );
      var cubeBrush = new Brush( palette, "cube", cube );
      cursor3d = cubeBrush.object;

      init();
      animate();

      function init() {

        setupFileDrop( );

        container = document.createElement( 'div' );
        document.body.appendChild( container );

        var info = document.createElement( 'div' );
        info.style.position = 'absolute';
        info.style.top = '10px';
        info.style.width = '100%';
        info.style.textAlign = 'center';
        info.innerHTML = 'Drag in .obj or ascii .stl files';
        container.appendChild( info );

        scene = new THREE.Scene();

        // Grid

        var size = 500, step = 50;

        var geometry = new THREE.Geometry();

        for ( var i = - size; i <= size; i += step ) {

          geometry.vertices.push( new THREE.Vector3( - size, i, 0 ) );
          geometry.vertices.push( new THREE.Vector3(   size, i, 0 ) );

          geometry.vertices.push( new THREE.Vector3( i, - size, 0 ) );
          geometry.vertices.push( new THREE.Vector3( i,   size, 0 ) );

        }

        var material = new THREE.LineBasicMaterial( { color: 0xffffff, opacity: 0.2 } );

        var line = new THREE.Line( geometry, material );
        line.type = THREE.LinePieces;
        scene.add( line );

        // intersect ground

        projector = new THREE.Projector();

        plane = new THREE.Mesh( new THREE.PlaneGeometry( 1000, 1000 ), new THREE.MeshBasicMaterial() );
        plane.visible = false;
        scene.add( plane );

        objects.push( plane );

        var material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );

        // Lights

        var ambientLight = new THREE.AmbientLight( 0x606060 );
        scene.add( ambientLight );

        var directionalLight = new THREE.DirectionalLight( 0xffffff );
        directionalLight.position.x = Math.random() - 0.5;
        directionalLight.position.y = Math.random() - 0.5;
        directionalLight.position.z = Math.random() - 0.5;
        directionalLight.position.normalize();
        scene.add( directionalLight );

        var directionalLight = new THREE.DirectionalLight( 0x808080 );
        directionalLight.position.x = Math.random() - 0.5;
        directionalLight.position.y = Math.random() - 0.5;
        directionalLight.position.z = Math.random() - 0.5;
        directionalLight.position.normalize();
        scene.add( directionalLight );

        // viewports and cameras
        rendererMain = new THREE.CanvasRenderer();
        rendererMain.setClearColor( 0x000000 );
        container.appendChild(rendererMain.domElement);

        cameraMain = new THREE.PerspectiveCamera( 40, rendererMain.domElement.width / rendererMain.domElement.height, 1, 10000 );
        cameraMain.position.z = 800;

        rendererAux = new THREE.CanvasRenderer();
        rendererAux.setClearColor( 0x505070 );
        rendererAux.setSize( 300, 300 );
        container.appendChild(rendererAux.domElement);

        //cameraAux = new THREE.OrthographicCamera( -1000, 1000, -1000, 1000, 1, 10000 );
        cameraAux = new THREE.PerspectiveCamera( 40, rendererAux.domElement.width / rendererAux.domElement.height, 1, 10000 );
        cameraAux.aspect = rendererAux.domElement.width / rendererAux.domElement.height;
        cameraAux.updateProjectionMatrix();
        cameraAux.position.x = 0;
        cameraAux.position.y = 0;
        cameraAux.position.z = 1400;
        cameraAux.lookAt( target );

        // setup initial sizes for things
        onWindowResize();

        rendererMain.mouse = new THREE.Vector3( 0, 10000, 0.5 );
        stats = new Stats();
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.top = '0px';
        container.appendChild( stats.domElement );

        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.addEventListener( 'mousedown', onDocumentMouseDown, false );
        document.addEventListener( 'keydown', onDocumentKeyDown, false );
        document.addEventListener( 'keyup', onDocumentKeyUp, false );

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        rendererMain.setSize( window.innerWidth-300, window.innerHeight );
        cameraMain.aspect = rendererMain.domElement.width / rendererMain.domElement.height;
        cameraMain.updateProjectionMatrix();

      }

      function onDocumentMouseMove( event ) {

        event.preventDefault();

        rendererMain.mouse.x = ( event.clientX / rendererMain.domElement.width ) * 2 - 1;
        rendererMain.mouse.y = - ( event.clientY / rendererMain.domElement.height ) * 2 + 1;

      }

      function onDocumentMouseDown( event ) {

        event.preventDefault();

        var intersects = raycaster.intersectObjects( objects );

        if ( intersects.length > 0 ) {

          var intersect = intersects[ 0 ];

          if ( isShiftDown ) {

            // if shift is down try and remove shit?
            if ( intersect.object != plane ) {

              scene.remove( intersect.object );

              objects.splice( objects.indexOf( intersect.object ), 1 );

            }

            return;
          }

          // get the normal at this point in global coords
          normalMatrix.getNormalMatrix( intersect.object.matrixWorld );
          var normal = intersect.face.normal.clone();
          normal.applyMatrix3( normalMatrix ).normalize();

          var voxel = cursor3d.clone();
          if ( voxel.material )
          {
            voxel.material = cubeMaterial;
            objects.push( voxel );
          }
          else
          {
            for ( var i=0; i<voxel.children.length; i++ )
            {
              voxel.children[i].material = cubeMaterial;
              objects.push( voxel.children[i] );
            }
          }

          // get the rotation needed so z-axis is aligned with normal
          var normalRotation = new THREE.Quaternion();
          normalRotation.setFromUnitVectors( new THREE.Vector3(0,1,0), normal );
          voxel.rotation.setFromQuaternion(normalRotation);

          voxel.position.addVectors( intersect.point, normal );
          scene.add( voxel );

        }
      }

      function onDocumentKeyDown( event ) {

        switch( event.keyCode ) {

          case 16: isShiftDown = true; break;
          case 17: isCtrlDown = true; break;

        }

      }

      function onDocumentKeyUp( event ) {

        switch( event.keyCode ) {

          case 16: isShiftDown = false; break;
          case 17: isCtrlDown = false; break;

        }
      }

      function save() {

        window.open( rendererMain.domElement.toDataURL('image/png'), 'mywindow' );
        return false;

      }

      //

      function animate() {

        requestAnimationFrame( animate );

        render();
        stats.update();

      }

      function render() {

        if ( isCtrlDown ) {

          theta += rendererMain.mouse.x * 3;

        }

        cameraMain.position.x = 1400 * Math.sin( theta * Math.PI / 360 );
        cameraMain.position.y = 1400 * Math.cos( theta * Math.PI / 360 );
        cameraMain.up.set( 0, 0, 1 );
        cameraMain.lookAt( target );

        raycaster = projector.pickingRay( rendererMain.mouse.clone(), cameraMain );

        var intersects = raycaster.intersectObjects( objects );
        scene.remove( cursor3d );
        if ( intersects.length > 0 ) {
          var intersect = intersects[0];

          // get the normal at this point in global coords
          normalMatrix.getNormalMatrix( intersect.object.matrixWorld );
          var normal = intersect.face.normal.clone();
          normal.applyMatrix3( normalMatrix ).normalize();
          // get the rotation needed so z-axis is aligned with normal
          var normalRotation = new THREE.Quaternion();
          normalRotation.setFromUnitVectors( new THREE.Vector3(0,1,0), normal );
          cursor3d.rotation.setFromQuaternion(normalRotation);

          cursor3d.position.copy( intersect.point );
          scene.add( cursor3d );
        }

        rendererMain.render( scene, cameraMain );
        rendererAux.render( scene, cameraAux );

      }


    </script>

	</body>
</html>
